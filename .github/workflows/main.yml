name: Vprofile Actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Maven Testing
        run: mvn test
      
      - name: Checkstyle
        run: mvn checkstyle:checkstyle
      
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: '11'

      - name: Setup Sonar
        uses: warchant/setup-sonar-scanner@v7

      - name: Run Sonar
        run: sonar-scanner
             -Dsonar.host.url=${{ secrets.SONAR_URL }}
             -Dsonar.login=${{ secrets.SONAR_TOKEN }}
             -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
             -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
             -Dsonar.sources=src/
             -Dsonar.junit.reportsPath=target/surefire-reports/
             -Dsonar.jacoco.reportsPath=target/jacoco.exec
             -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml
             -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/


      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} 
  BUILD_AND_PUSH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Update application.properties file 
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties
    
      - name: BUILD & upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
            access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            registry: ${{ secrets.REGISTRY }}
            cache_from: ${{ secrets.cache }}
            repo: vprofile-app
            region: ${{ env.AWS_REGION }}
            tags: "latest,${{ github.run_number }}"
            daemon_off: false
            dockerfile: ./Dockerfile
            context: ./

